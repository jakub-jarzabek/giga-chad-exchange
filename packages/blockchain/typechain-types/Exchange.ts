/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface ExchangeInterface extends utils.Interface {
  functions: {
    "balanceOf(address,address)": FunctionFragment;
    "cancelOrder(uint256)": FunctionFragment;
    "deposit(address,uint256)": FunctionFragment;
    "exchangeAccount()": FunctionFragment;
    "fee()": FunctionFragment;
    "fillOrder(uint256)": FunctionFragment;
    "idToCancelledStatus(uint256)": FunctionFragment;
    "idToCompletedStatus(uint256)": FunctionFragment;
    "orderCount()": FunctionFragment;
    "placeOrder(address,uint256,address,uint256)": FunctionFragment;
    "withdraw(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "balanceOf"
      | "cancelOrder"
      | "deposit"
      | "exchangeAccount"
      | "fee"
      | "fillOrder"
      | "idToCancelledStatus"
      | "idToCompletedStatus"
      | "orderCount"
      | "placeOrder"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOrder",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeAccount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fillOrder",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "idToCancelledStatus",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "idToCompletedStatus",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "orderCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "placeOrder",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "exchangeAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fillOrder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "idToCancelledStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "idToCompletedStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "orderCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "placeOrder", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Cancel(uint256,address,address,address,uint256,uint256,uint256)": EventFragment;
    "Deposit(address,address,uint256,uint256)": EventFragment;
    "NewOrder(uint256,address,address,address,uint256,uint256,uint256)": EventFragment;
    "NewTrade(uint256,address,address,uint256,address,uint256,address,uint256)": EventFragment;
    "Withdraw(address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Cancel"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewTrade"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export interface CancelEventObject {
  _id: BigNumber;
  _creator: string;
  _tokenReceive: string;
  _tokenSend: string;
  _amountReceive: BigNumber;
  _amountSend: BigNumber;
  _ts: BigNumber;
}
export type CancelEvent = TypedEvent<
  [BigNumber, string, string, string, BigNumber, BigNumber, BigNumber],
  CancelEventObject
>;

export type CancelEventFilter = TypedEventFilter<CancelEvent>;

export interface DepositEventObject {
  _token: string;
  _user: string;
  _amount: BigNumber;
  _balance: BigNumber;
}
export type DepositEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  DepositEventObject
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface NewOrderEventObject {
  _id: BigNumber;
  _creator: string;
  _tokenReceive: string;
  _tokenSend: string;
  _amountReceive: BigNumber;
  _amountSend: BigNumber;
  _ts: BigNumber;
}
export type NewOrderEvent = TypedEvent<
  [BigNumber, string, string, string, BigNumber, BigNumber, BigNumber],
  NewOrderEventObject
>;

export type NewOrderEventFilter = TypedEventFilter<NewOrderEvent>;

export interface NewTradeEventObject {
  _id: BigNumber;
  _initiator: string;
  _tokenReceive: string;
  _amountReceive: BigNumber;
  _tokenSend: string;
  _amountSend: BigNumber;
  _creator: string;
  _timestamp: BigNumber;
}
export type NewTradeEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, string, BigNumber, string, BigNumber],
  NewTradeEventObject
>;

export type NewTradeEventFilter = TypedEventFilter<NewTradeEvent>;

export interface WithdrawEventObject {
  _token: string;
  _user: string;
  _amount: BigNumber;
  _balance: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface Exchange extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ExchangeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    balanceOf(
      _token: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    cancelOrder(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deposit(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    exchangeAccount(overrides?: CallOverrides): Promise<[string]>;

    fee(overrides?: CallOverrides): Promise<[BigNumber]>;

    fillOrder(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    idToCancelledStatus(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    idToCompletedStatus(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    orderCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    placeOrder(
      _tokenReceive: PromiseOrValue<string>,
      _amountReceive: PromiseOrValue<BigNumberish>,
      _tokenSend: PromiseOrValue<string>,
      _amountSend: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  balanceOf(
    _token: PromiseOrValue<string>,
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  cancelOrder(
    _id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deposit(
    _token: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  exchangeAccount(overrides?: CallOverrides): Promise<string>;

  fee(overrides?: CallOverrides): Promise<BigNumber>;

  fillOrder(
    _id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  idToCancelledStatus(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  idToCompletedStatus(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  orderCount(overrides?: CallOverrides): Promise<BigNumber>;

  placeOrder(
    _tokenReceive: PromiseOrValue<string>,
    _amountReceive: PromiseOrValue<BigNumberish>,
    _tokenSend: PromiseOrValue<string>,
    _amountSend: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    _token: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    balanceOf(
      _token: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelOrder(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    deposit(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    exchangeAccount(overrides?: CallOverrides): Promise<string>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    fillOrder(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    idToCancelledStatus(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    idToCompletedStatus(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    orderCount(overrides?: CallOverrides): Promise<BigNumber>;

    placeOrder(
      _tokenReceive: PromiseOrValue<string>,
      _amountReceive: PromiseOrValue<BigNumberish>,
      _tokenSend: PromiseOrValue<string>,
      _amountSend: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    withdraw(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "Cancel(uint256,address,address,address,uint256,uint256,uint256)"(
      _id?: null,
      _creator?: null,
      _tokenReceive?: null,
      _tokenSend?: null,
      _amountReceive?: null,
      _amountSend?: null,
      _ts?: null
    ): CancelEventFilter;
    Cancel(
      _id?: null,
      _creator?: null,
      _tokenReceive?: null,
      _tokenSend?: null,
      _amountReceive?: null,
      _amountSend?: null,
      _ts?: null
    ): CancelEventFilter;

    "Deposit(address,address,uint256,uint256)"(
      _token?: null,
      _user?: null,
      _amount?: null,
      _balance?: null
    ): DepositEventFilter;
    Deposit(
      _token?: null,
      _user?: null,
      _amount?: null,
      _balance?: null
    ): DepositEventFilter;

    "NewOrder(uint256,address,address,address,uint256,uint256,uint256)"(
      _id?: null,
      _creator?: null,
      _tokenReceive?: null,
      _tokenSend?: null,
      _amountReceive?: null,
      _amountSend?: null,
      _ts?: null
    ): NewOrderEventFilter;
    NewOrder(
      _id?: null,
      _creator?: null,
      _tokenReceive?: null,
      _tokenSend?: null,
      _amountReceive?: null,
      _amountSend?: null,
      _ts?: null
    ): NewOrderEventFilter;

    "NewTrade(uint256,address,address,uint256,address,uint256,address,uint256)"(
      _id?: null,
      _initiator?: null,
      _tokenReceive?: null,
      _amountReceive?: null,
      _tokenSend?: null,
      _amountSend?: null,
      _creator?: null,
      _timestamp?: null
    ): NewTradeEventFilter;
    NewTrade(
      _id?: null,
      _initiator?: null,
      _tokenReceive?: null,
      _amountReceive?: null,
      _tokenSend?: null,
      _amountSend?: null,
      _creator?: null,
      _timestamp?: null
    ): NewTradeEventFilter;

    "Withdraw(address,address,uint256,uint256)"(
      _token?: null,
      _user?: null,
      _amount?: null,
      _balance?: null
    ): WithdrawEventFilter;
    Withdraw(
      _token?: null,
      _user?: null,
      _amount?: null,
      _balance?: null
    ): WithdrawEventFilter;
  };

  estimateGas: {
    balanceOf(
      _token: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelOrder(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deposit(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    exchangeAccount(overrides?: CallOverrides): Promise<BigNumber>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    fillOrder(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    idToCancelledStatus(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    idToCompletedStatus(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    orderCount(overrides?: CallOverrides): Promise<BigNumber>;

    placeOrder(
      _tokenReceive: PromiseOrValue<string>,
      _amountReceive: PromiseOrValue<BigNumberish>,
      _tokenSend: PromiseOrValue<string>,
      _amountSend: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    balanceOf(
      _token: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelOrder(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    exchangeAccount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fillOrder(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    idToCancelledStatus(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    idToCompletedStatus(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    orderCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    placeOrder(
      _tokenReceive: PromiseOrValue<string>,
      _amountReceive: PromiseOrValue<BigNumberish>,
      _tokenSend: PromiseOrValue<string>,
      _amountSend: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
