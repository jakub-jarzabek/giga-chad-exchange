/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { Token, TokenInterface } from "../Token";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "string",
        name: "_symbol",
        type: "string",
      },
      {
        internalType: "uint8",
        name: "_decimals",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "_totalSupply",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "Token__Burn_Forbidden",
    type: "error",
  },
  {
    inputs: [],
    name: "Token__Not_Enough_Funds",
    type: "error",
  },
  {
    inputs: [],
    name: "Token__Unauthorized_Transfer",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "_spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_from",
        type: "address",
      },
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040516200156d3803806200156d8339818101604052810190620000379190620003cb565b83600090805190602001906200004f92919062000105565b5082600190805190602001906200006892919062000105565b5081600260006101000a81548160ff021916908360ff160217905550600260009054906101000a900460ff16600a620000a29190620005fe565b81620000af91906200064f565b600381905550600354600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050505062000715565b8280546200011390620006df565b90600052602060002090601f01602090048101928262000137576000855562000183565b82601f106200015257805160ff191683800117855562000183565b8280016001018555821562000183579182015b828111156200018257825182559160200191906001019062000165565b5b50905062000192919062000196565b5090565b5b80821115620001b157600081600090555060010162000197565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200021e82620001d3565b810181811067ffffffffffffffff8211171562000240576200023f620001e4565b5b80604052505050565b600062000255620001b5565b905062000263828262000213565b919050565b600067ffffffffffffffff821115620002865762000285620001e4565b5b6200029182620001d3565b9050602081019050919050565b60005b83811015620002be578082015181840152602081019050620002a1565b83811115620002ce576000848401525b50505050565b6000620002eb620002e58462000268565b62000249565b9050828152602081018484840111156200030a5762000309620001ce565b5b620003178482856200029e565b509392505050565b600082601f830112620003375762000336620001c9565b5b815162000349848260208601620002d4565b91505092915050565b600060ff82169050919050565b6200036a8162000352565b81146200037657600080fd5b50565b6000815190506200038a816200035f565b92915050565b6000819050919050565b620003a58162000390565b8114620003b157600080fd5b50565b600081519050620003c5816200039a565b92915050565b60008060008060808587031215620003e857620003e7620001bf565b5b600085015167ffffffffffffffff811115620004095762000408620001c4565b5b62000417878288016200031f565b945050602085015167ffffffffffffffff8111156200043b576200043a620001c4565b5b62000449878288016200031f565b93505060406200045c8782880162000379565b92505060606200046f87828801620003b4565b91505092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b60018511156200050957808604811115620004e157620004e06200047b565b5b6001851615620004f15780820291505b80810290506200050185620004aa565b9450620004c1565b94509492505050565b600082620005245760019050620005f7565b81620005345760009050620005f7565b81600181146200054d576002811462000558576200058e565b6001915050620005f7565b60ff8411156200056d576200056c6200047b565b5b8360020a9150848211156200058757620005866200047b565b5b50620005f7565b5060208310610133831016604e8410600b8410161715620005c85782820a905083811115620005c257620005c16200047b565b5b620005f7565b620005d78484846001620004b7565b92509050818404811115620005f157620005f06200047b565b5b81810290505b9392505050565b60006200060b8262000390565b9150620006188362000352565b9250620006477fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848462000512565b905092915050565b60006200065c8262000390565b9150620006698362000390565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615620006a557620006a46200047b565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620006f857607f821691505b602082108114156200070f576200070e620006b0565b5b50919050565b610e4880620007256000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063313ce56711610066578063313ce5671461013457806370a082311461015257806395d89b4114610182578063a9059cbb146101a0578063dd62ed3e146101d057610093565b806306fdde0314610098578063095ea7b3146100b657806318160ddd146100e657806323b872dd14610104575b600080fd5b6100a0610200565b6040516100ad9190610aa6565b60405180910390f35b6100d060048036038101906100cb9190610b61565b61028e565b6040516100dd9190610bbc565b60405180910390f35b6100ee6103e6565b6040516100fb9190610be6565b60405180910390f35b61011e60048036038101906101199190610c01565b6103ec565b60405161012b9190610bbc565b60405180910390f35b61013c610732565b6040516101499190610c70565b60405180910390f35b61016c60048036038101906101679190610c8b565b610745565b6040516101799190610be6565b60405180910390f35b61018a61075d565b6040516101979190610aa6565b60405180910390f35b6101ba60048036038101906101b59190610b61565b6107eb565b6040516101c79190610bbc565b60405180910390f35b6101ea60048036038101906101e59190610cb8565b6109e8565b6040516101f79190610be6565b60405180910390f35b6000805461020d90610d27565b80601f016020809104026020016040519081016040528092919081815260200182805461023990610d27565b80156102865780601f1061025b57610100808354040283529160200191610286565b820191906000526020600020905b81548152906001019060200180831161026957829003601f168201915b505050505081565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156102f6576040517f66a8dc1c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516103d49190610be6565b60405180910390a36001905092915050565b60035481565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610454576040517f66a8dc1c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111561050a576040517fd594d2ba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610583576040517f92f32cdc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461060f9190610d88565b9250508190555081600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546106659190610d88565b9250508190555081600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546106bb9190610dbc565b925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161071f9190610be6565b60405180910390a3600190509392505050565b600260009054906101000a900460ff1681565b60046020528060005260406000206000915090505481565b6001805461076a90610d27565b80601f016020809104026020016040519081016040528092919081815260200182805461079690610d27565b80156107e35780601f106107b8576101008083540402835291602001916107e3565b820191906000526020600020905b8154815290600101906020018083116107c657829003601f168201915b505050505081565b600081600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610866576040517f92f32cdc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156108cd576040517f66a8dc1c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461091c9190610d88565b9250508190555081600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546109729190610dbc565b925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516109d69190610be6565b60405180910390a36001905092915050565b6005602052816000526040600020602052806000526040600020600091509150505481565b600081519050919050565b600082825260208201905092915050565b60005b83811015610a47578082015181840152602081019050610a2c565b83811115610a56576000848401525b50505050565b6000601f19601f8301169050919050565b6000610a7882610a0d565b610a828185610a18565b9350610a92818560208601610a29565b610a9b81610a5c565b840191505092915050565b60006020820190508181036000830152610ac08184610a6d565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610af882610acd565b9050919050565b610b0881610aed565b8114610b1357600080fd5b50565b600081359050610b2581610aff565b92915050565b6000819050919050565b610b3e81610b2b565b8114610b4957600080fd5b50565b600081359050610b5b81610b35565b92915050565b60008060408385031215610b7857610b77610ac8565b5b6000610b8685828601610b16565b9250506020610b9785828601610b4c565b9150509250929050565b60008115159050919050565b610bb681610ba1565b82525050565b6000602082019050610bd16000830184610bad565b92915050565b610be081610b2b565b82525050565b6000602082019050610bfb6000830184610bd7565b92915050565b600080600060608486031215610c1a57610c19610ac8565b5b6000610c2886828701610b16565b9350506020610c3986828701610b16565b9250506040610c4a86828701610b4c565b9150509250925092565b600060ff82169050919050565b610c6a81610c54565b82525050565b6000602082019050610c856000830184610c61565b92915050565b600060208284031215610ca157610ca0610ac8565b5b6000610caf84828501610b16565b91505092915050565b60008060408385031215610ccf57610cce610ac8565b5b6000610cdd85828601610b16565b9250506020610cee85828601610b16565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610d3f57607f821691505b60208210811415610d5357610d52610cf8565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d9382610b2b565b9150610d9e83610b2b565b925082821015610db157610db0610d59565b5b828203905092915050565b6000610dc782610b2b565b9150610dd283610b2b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610e0757610e06610d59565b5b82820190509291505056fea2646970667358221220da4e41593002e143b5132e7c6f05afc921aa1de9e4dd184678dcc65908a35b9f64736f6c63430008090033";

type TokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Token__factory extends ContractFactory {
  constructor(...args: TokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    _decimals: PromiseOrValue<BigNumberish>,
    _totalSupply: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Token> {
    return super.deploy(
      _name,
      _symbol,
      _decimals,
      _totalSupply,
      overrides || {}
    ) as Promise<Token>;
  }
  override getDeployTransaction(
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    _decimals: PromiseOrValue<BigNumberish>,
    _totalSupply: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _name,
      _symbol,
      _decimals,
      _totalSupply,
      overrides || {}
    );
  }
  override attach(address: string): Token {
    return super.attach(address) as Token;
  }
  override connect(signer: Signer): Token__factory {
    return super.connect(signer) as Token__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TokenInterface {
    return new utils.Interface(_abi) as TokenInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Token {
    return new Contract(address, _abi, signerOrProvider) as Token;
  }
}
